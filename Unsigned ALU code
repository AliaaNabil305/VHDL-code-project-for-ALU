library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use ieee.NUMERIC_STD.all;
entity ALU is
 generic ( 
 constant N: natural := 1 
 );
 
 Port (
 A, B : in STD_LOGIC_VECTOR(3 downto 0);
 ALU_Sel : in STD_LOGIC_VECTOR(3 downto 0); 
 ALU_Out : out STD_LOGIC_VECTOR(3 downto 0); 
 Carryout : out std_logic 
 );
end ALU; 
architecture Behavioral of ALU is

signal ALU_Result : std_logic_vector (3 downto 0);
signal tmp: std_logic_vector (4 downto 0);
begin
 process(A,B,ALU_Sel)
begin
 case(ALU_Sel) is
 when "0000" => -- Increment A
 ALU_Result <= A + "0001" ; 
 when "0001" => -- Decrement A
 ALU_Result <= A - "0001" ;
 when "0010" => -- Transfer B
 ALU_Result <= B ; 
 when "0011" => -- Increment B
 ALU_Result <= B + "0001" ; 
 when "0100" => -- Decrement B
 ALU_Result <= B - "0001" ;
 when "0101" => -- Transfer A
 ALU_Result <= A ; 
 when "0110" => -- Addition A and B
 ALU_Result <= A + B ; 
 when "0111" => -- Multiplication A by 2 
 ALU_Result <= std_logic_vector(unsigned(A) sll 1);

 when "1000" => -- Complement A
 ALU_Result <= not A;
 when "1001" => -- Complement B
 ALU_Result <= not B;
 when "1010" => -- Logical and 
 ALU_Result <= A and B;
 when "1011" => -- Logical or
 ALU_Result <= A or B;
 when "1100" => -- Logical xor 
 ALU_Result <= A xor B;
 when "1101" => -- Logical xnor
 ALU_Result <= A xnor B;
 when "1110" => -- Logical nand 
 ALU_Result <= A nand B;
 when "1111" => -- Logical nor
 ALU_Result <= A nor B;
 
 when others => ALU_Result <= A + B ; 
 end case;
end process;
ALU_Out <= ALU_Result; 
tmp <= ('0' & A) + ('0' & B);
Carryout <= tmp(4); 
end Behavioral;
